1. validations are used to store only valid data in the database
2. validation placed in models
																																															
3. validations are classified into 2 types 
  a. client side validations(jquery/javascipt and are written in views or app/assets/javascripts/application.js)
  b. server side validations(rails models)

presence validation::

  1.  it makes field as mandatory field
  2.  validates :name, :mobile,presence: true

valid? and invalid?::

@tu = Tutor.create(name:"sample")

@tu.valid?

@tu.errors


The following methods trigger validations, and will save the object to the database only if the object is valid:

 create
 create!
 save  --  wont raise any error if object is failed to save
 save!  --  (ActiveRecoed::invalid) raises error if object is failed to save
 update
 update!

Skipping Validations::

The following methods skip validations, and will save the object to the database regardless of its validity.
 They should be used with caution.

 decrement!
 decrement_counter
 increment!
 increment_counter
 toggle!
 touch
 update_all
 update_attribute
 update_column
 update_columns
 update_counters

@tu = Tutor.create(name:"sample")
@tu.save(validate:false)  --> this will skip the validations

@tu.errors.messages
@tu.valid?
@tu.errors[:mobile].any?
@tu.errors.any?

acceptance::
This method validates that a checkbox on the user interface was checked when a form was submitted

 validates :terms_of_service, acceptance: true
 validates :terms_of_service, acceptance: { message: 'satish you must be abided' }

validates_associated::
You should use this helper when your model has associations with other models and they also need to be validated
  
   has_many :books
   validates_associated :books

confirmation
 1. You should use this helper when you have two text fields that should receive exactly the same content.
model::  

  validates :email, confirmation: true

form code::

  <%= text_field :person, :email %>
  <%= text_field :person, :email_confirmation %>

2. here is also a :case_sensitive option that you can use to define whether the confirmation constraint will be case sensitive or not
   validates :email, confirmation: { case_sensitive: false }

exclusion::

This helper validates that the attributes' values are not included in a given set.

validates :subdomain, exclusion: { in: %w(www us ca jp),
    message: "%{value} is reserved." }


format::
This helper validates the attributes' values by testing whether they match a given regular expression,
 which is specified using the :with option.

1. how to validate a filed by using regular expression

   by using format and with we can validate a field using regular expressions

2.syntax:

   validates :legacy_code, format: { with: /\A[a-zA-Z]+\z/, message: "only allows letters" }

inclusion::

  1. This helper validates that the attributes' values are included in a given set.
  2. In fact, this set can be any enumerable object.
  3. exactly opposite to exclusion
  4. syntax:

     validates :size, inclusion: { in: %w(small medium large), message: "%{value} is not a valid size" }

length::
  1.This helper validates the length of the attributes' values.  
  2.
  validates :name, length: { minimum: 2 }
  validates :bio, length: { maximum: 500 }
  validates :password, length: { in: 6..20 }
  validates :registration_number, length: { is: 6 }
  validates :bio, length: { maximum: 1000,too_long: "%{count} characters is the maximum allowed" }

numericality::

  1.This helper validates that your attributes have only numeric values
  2.syntax:

     validates :points, numericality: true   # 2.3
     validates :games_played, numericality: { only_integer: true } #2,3

  :greater_than - Specifies the value must be greater than the supplied value. The default error message for this option is "must be greater than %{count}".
  :greater_than_or_equal_to - Specifies the value must be greater than or equal to the supplied value. The default error message for this option is "must be greater than or equal to %{count}".
  :equal_to - Specifies the value must be equal to the supplied value. The default error message for this option is "must be equal to %{count}".
  :less_than - Specifies the value must be less than the supplied value. The default error message for this option is "must be less than %{count}".
  :less_than_or_equal_to - Specifies the value must be less than or equal to the supplied value. The default error message for this option is "must be less than or equal to %{count}".
  :other_than - Specifies the value must be other than the supplied value. The default error message for this option is "must be other than %{count}".
  :odd - Specifies the value must be an odd number if set to true. The default error message for this option is "must be odd".
  :even - Specifies the value must be an even number if set to true. The default error message for this option is "must be even".

absence
 1.This helper validates that the specified attributes are absent. 
 2.syntax:

    validates :name, :login, :email, absence: true
uniqueness
 1.This helper validates that the attribute's value is unique right before the object gets saved
 2. syntax
    validates :email, uniqueness: true

    validates :name, uniqueness: { scope: :phone, message: "should happen once per year" }

    satish  8500281438
    satish  9052945731
    satish  8500281438

Scaffold::
MVC(model view controller)
1. rails g scaffold user name:string city:string phone:string country:string
2. railg g migration create_parties name:string
3. rails g model company name:string location:string
4. rails g controller movies index show new edit
rake db:migrate


validations wil be excuted for create,update,save and valid?

On:::

validates :email, uniqueness: true, on: :create
validates :age, numericality: true, on: :update

validation for non restfull crud actions::

validates :email, uniqueness: true, on: :account_setup
validates :age, numericality: true, on: :account_setup

Conditional Validation::

validates :name, presence: true, if: :user_count?
 
  def user_count?
    User.count > 1
  end




1. conditional validations
2. custom validations
3. validations using scope
4. allow_nil and allow_blank
5. validations for specific actions like create,update or custom action





table_name  ::   computers  name:string model:string ram:string processor:string

MVC

rails g migration create_computers name:string model:string ram:string processor:string
rake db:migrate
app/model/computer.rb
